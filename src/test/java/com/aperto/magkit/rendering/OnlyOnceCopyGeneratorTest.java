package com.aperto.magkit.rendering;

import com.aperto.magkit.mockito.ContextMockUtils;
import info.magnolia.rendering.engine.RenderException;
import info.magnolia.rendering.template.AutoGenerationConfiguration;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import javax.jcr.Node;
import javax.jcr.RepositoryException;
import java.util.HashMap;
import java.util.Map;

import static com.aperto.magkit.mockito.MagnoliaNodeMockUtils.mockAreaNode;
import static com.aperto.magkit.mockito.jcr.NodeStubbingOperation.stubProperty;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

/**
 * Testing OnlyOnceCopyGenerator.
 *
 * @since 2023-06-02
 * @author wolf.bubenik @ibmix.de
 */
public class OnlyOnceCopyGeneratorTest {

    private Node _area;
    private AutoGenerationConfiguration<Map<String, Object>> _config;

    private OnlyOnceCopyGenerator _generator;

    @Before
    public void setUp() throws Exception {
        ContextMockUtils.cleanContext();
        _area = mockAreaNode("stageArea");
        _config = mock(AutoGenerationConfiguration.class);
        _generator = new OnlyOnceCopyGenerator(_area);
    }

    @Test
    public void generate() throws RepositoryException, RenderException {
        // Mock area that has no autogenerated content:
        Map<String, Object> content = new HashMap<>();
        doReturn(content).when(_config).getContent();

        _generator.generate(_config);
        // verify checking area marker property:
        verify(_area, times(2)).hasProperty("isAutogenerated");
        // verify executing autogeneration (reading config)
        verify(_config, times(1)).getContent();
        // verify setting marker property:
        verify(_area, times(1)).setProperty("isAutogenerated", true);
        // verify saving session:
        verify(_area.getSession(), times(1)).save();
    }

    @Test
    public void generateNot() throws RepositoryException, RenderException {
        // Mock area that has autogenerated content:
        stubProperty("isAutogenerated", true).of(_area);

        _generator.generate(_config);
        // verify checking area marker property:
        verify(_area, times(1)).hasProperty("isAutogenerated");
        // verify NOT executing autogeneration (reading config)
        verify(_config, never()).getContent();
        // verify NOT setting marker property again:
        verify(_area, never()).setProperty("isAutogenerated", true);
        // verify NOT saving session:
        verify(_area.getSession(), never()).save();
    }

    @After
    public void tearDown() throws Exception {
        ContextMockUtils.cleanContext();
    }
}